Project felépítése:
	A. változat
		Egyben kezeljük a frontend és backend részt. Például thymeleaf segítségével a frontend oldalról, backend oldalról pedig
		@Controller, @RequestMapping("/tortenetek") és a Model segítségével. 
	B. változat
		Külön válik a frontend a backendtől teljesen ->
			A frontend meg van írva egy js keretrendszer segítségével, pl. Angular, React
			A backend részről pedig csak kiadjuk az adatot @RestController, @RequestMapping("/tortenetek"), @JsonBackReference (idegen kulcs esetén fontos, amikor egyik objektumba ágyazódik a másik) segítségével. Ilyenkor egy json-t adunk át, vagy xml-t, esetleg sima text-et, amit a frontend feldolgoz.
			
Thymeleaf fregmentek:
	- Minden honlapon vannak olyan tartalmak, amelyek nem változnak az oldalakon pl. header, menü, footer. Ezeket célszerű csak egyszer létrehozni. Erre jók a fregmentek. Ezeket bármelyik html-ben felhasználhatjuk. 
	- kell hozzá egy plusz dependency
		<dependency>
			<groupId>nz.net.ultraq.thymeleaf</groupId>
			<artifactId>thymeleaf-layout-dialect</artifactId>
		</dependency>
	-namespace is: xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout
	
Regisztrációs felület:
	- html form
	- SecurityConfigban engedélyezni az elérési utat (a html-hez és a feldolgozó oldalhoz is)
	- Login formra link a regisztrációhoz
	- controller requestMappinggel útvonal(a html-hez és a feldolgozó oldalhoz is)
	- a html megjelenítésekor átadunk egy üres usert is a Model-el
	- ezt feltölti a form és a /reg átveszi (a feldolgozó oldal) @ModelAttribute annotációval jön át a form adata
	- az adatot elmentjük pl egy adatbázisba
	- login oldalra irányítjuk
	Fontos: jelszót kétszer egymás után be kell kérni		
			kell validációt csinálni
			titkosítjuk a jelszavakat
			e-mailből aktiváltatjuk